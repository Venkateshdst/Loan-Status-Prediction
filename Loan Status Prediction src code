import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
loan_data = pd.read_csv('loan.csv')
print(loan_data)
loan_data.head()
type(loan_data)
loan_data.shape
loan_data.describe()
loan_data.isnull().sum()
loan_data = loan_data.dropna()
loan_data.isnull().sum()
loan_data.replace({"Loan_Status":{"N":0, "Y":1}}, inplace=True)
loan_data.head()
loan_data['Dependents'].value_counts()
loan_data = loan_data.replace(to_replace='3+', value=4)
loan_data['Dependents'].value_counts()
sns.countplot(x='Education', hue='Loan_Status', data=loan_data)
sns.countplot(x='Married', hue='Loan_Status', data=loan_data)
sns.countplot(x='Gender', hue='Loan_Status', data=loan_data)
sns.countplot(x='Dependents', hue='Loan_Status', data=loan_data)
sns.countplot(x='Self_Employed', hue='Loan_Status', data=loan_data)
sns.countplot(x='ApplicantIncome', hue='Loan_Status', data=loan_data)
sns.countplot(x='CoapplicantIncome', hue='Loan_Status', data=loan_data)
sns.countplot(x='LoanAmount', hue='Loan_Status', data=loan_data)
sns.countplot(x='Loan_Amount_Term', hue='Loan_Status', data= loan_data)
sns.countplot(x='Credit_History', hue='Loan_Status', data=loan_data)
sns.countplot(x='Property_Area', hue='Loan_Status', data=loan_data)
loan_data.replace({'Married':{'No':0, 'Yes':1}, 'Gender':{'Male':1, 'Female':0}, 'Self_Employed':{'No':0, 'Yes':1},
                   'Property_Area':{'Rural':0, 'Semiurban':1, 'Urban':2},'Education': {'Graduate':1, 'Not Graduate':0}},inplace=True)
loan_data.head()
x = loan_data.drop(columns=['Loan_ID', 'Loan_Status'], axis=1)
y = loan_data['Loan_Status']
print(x)
print(y)
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.1,stratify=y, random_state=2)
print(x.shape, x_train.shape,x_test.shape)
vector= svm.SVC(kernel='linear')
vector.fit(x_train,y_train)
x_train_prediction = vector.predict(x_train)
training_data_accuracy = accuracy_score(y_train, x_train_prediction)
print(training_data_accuracy)
x_test_prediction=vector.predict(x_test)
test_data_accuracy = accuracy_score(y_test, x_test_prediction)
print(test_data_accuracy)
